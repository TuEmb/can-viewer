import { ComboBox, Button, VerticalBox, CheckBox, GroupBox } from "std-widgets.slint";
import { TextEdit } from "std-widgets.slint";
import { AboutSlint, Palette, Slider, HorizontalBox } from "std-widgets.slint";
import { LineEdit, StandardButton, ScrollView, TabWidget, ListView } from "std-widgets.slint";
import { CanData, CanMessage, CanSignal } from "messages.slint";
import { viewPage } from "view_page.slint";
import { filterPage } from "filter_page.slint";
import { selectPage } from "page_selection.slint";
import { initPage, socket_info } from "init_page.slint";

export component AppWindow inherits Window {
    in property <bool> is_filter: false;
    in property <bool> is_new_dbc: false;
    in property <bool> is_first_open: true;
    in property <bool> is_init: false;
    in property <string> init_string: "Please select CAN device to start";
    in property <socket_info> can_sockets;
    in property <[CanData]> messages;
    in property <[CanData]> filter_messages;
    in-out property <string> state;
    in-out property <int> bus_load;
    in-out property <int> bitrate;

    in-out property <int> active-page: 0;

    callback open_dbc_file();
    callback filter_id(CanData, bool);
    callback start(string, int, string);
    title: @tr("CAN VIEWER (version 0.2.0)");
    icon: @image-url("images/can_viewer_128px.png");
    background: #1a1f2b;
    default-font-family: "Noto Sans";
    default-font-size: 12px;
    preferred-height: 600px;
    preferred-width: 800px;

    if !is_init:
    initPage {
        out: init_string;
        can_sockets: can_sockets;
        start(name, index, bitrate) => {
            start(name, index, bitrate);
        }
    }

    if is_init:
    VerticalLayout {
        HorizontalLayout {
            view_selection := selectPage {
                min-height: 25px;
                text: "view";
                is_selected: true;
                selected => {
                    filter-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 0;
                }
            }
            filter_selection := selectPage {
                text: "filter";
                is_selected: false;
                selected => {
                    view-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 1;
                }
            }
            debug_selection := selectPage {
                text: "debug";
                is_selected: false;
                selected => {
                    filter-selection.is_selected = false;
                    view-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 2;
                }
            }
            chart_selection := selectPage {
                text: "chart";
                is_selected: false;
                selected => {
                    filter-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    view-selection.is_selected = false;
                    active-page = 3;
                }
            }
        }
        Rectangle {
            filterPage {
                is_visible: root.active-page == 1;
                page-num: 1;
                messages: root.messages;
                filter_id(can_data, checked) => {
                    filter_id(can_data, checked);
                }
            }
            if root.active-page == 0:
            viewPage {
                state: state;
                bitrate: bitrate;
                bus_load: bus_load;
                page-num: 0;
                is_filter: root.is_filter;
                messages: root.messages;
                filter_messages: root.filter_messages;
                open_dbc_file() => {
                    open_dbc_file()
                }
            }
        }
    }
}
