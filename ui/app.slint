import { ComboBox, Button, VerticalBox, CheckBox, GroupBox } from "std-widgets.slint";
import { TextEdit } from "std-widgets.slint";
import { AboutSlint, Palette, Slider, HorizontalBox } from "std-widgets.slint";
import { LineEdit, StandardButton, ScrollView, TabWidget, ListView } from "std-widgets.slint";
import { CanData, CanMessage, CanSignal } from "messages.slint";
import { viewPage } from "view_page.slint";
import { filterPage } from "filter_page.slint";
import { selectPage } from "page_selection.slint";
import { initPage, socket_info } from "init_page.slint";
import { CanChart } from "chart_page.slint";

export struct MouseData {
    move_x: int,
    move_y: int,
    position_x: int,
    position_y: int,
    is_release: bool,
    is_clean: bool,
    is_new_signal: bool,
    width: int,
    height: int
}

export component AppWindow inherits Window {
    in property <bool> is_filter: false;
    in property <bool> is_new_dbc: false;
    in property <bool> is_first_open: true;
    in property <bool> is_init: false;
    in property <string> init_string: "Please select CAN device to start";
    in property <socket_info> can_sockets;
    in property <[CanData]> messages;
    in property <[CanData]> filter_messages;
    in-out property <MouseData> mouse: {
        is_release: true,
    };

    in-out property <int> active-page: 0;

    callback open_dbc_file();
    callback filter_id(CanData, bool);
    callback start(string, int);
    pure callback render_plot(MouseData) -> image;
    title: @tr("CAN VIEWER (version 0.2.0)");
    icon: @image-url("images/can_viewer_128px.png");
    background: #1a1f2b;
    default-font-family: "Noto Sans";
    default-font-size: 12px;
    preferred-height: 600px;
    preferred-width: 800px;

    if !is_init:
    initPage {
        out: init_string;
        can_sockets: can_sockets;
        start(name, index) => {
            start(name, index)
        }
    }

    if is_init:
    VerticalLayout {
        HorizontalLayout {
            view_selection := selectPage {
                min-height: 25px;
                text: "view";
                is_selected: true;
                selected => {
                    filter-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 0;
                }
            }
            filter_selection := selectPage {
                text: "filter";
                is_selected: false;
                selected => {
                    view-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 1;
                }
            }
            debug_selection := selectPage {
                text: "debug";
                is_selected: false;
                selected => {
                    filter-selection.is_selected = false;
                    view-selection.is_selected = false;
                    chart-selection.is_selected = false;
                    active-page = 2;
                }
            }
            chart_selection := selectPage {
                text: "chart";
                is_selected: false;
                selected => {
                    filter-selection.is_selected = false;
                    debug-selection.is_selected = false;
                    view-selection.is_selected = false;
                    active-page = 3;
                }
            }
        }
        Rectangle {
            filterPage {
                is_visible: root.active-page == 1;
                page-num: 1;
                messages: root.messages;
                filter_id(can_data, checked) => {
                    filter_id(can_data, checked);
                }
            }
            if root.active-page == 0:
            viewPage {
                page-num: 0;
                is_filter: root.is_filter;
                messages: root.messages;
                filter_messages: root.filter_messages;
                open_dbc_file() => {
                    open_dbc_file()
                }
            }
            if root.active-page == 3:
            HorizontalLayout {
                Rectangle {
                    width: 2px;
                    background: #ffffff;
                }
                Image {
                    image-fit: fill;
                    source: root.render_plot(mouse);
                    touch := TouchArea {
                        property <float> pressed-pitch;
                        property <float> pressed-yaw;
        
                        pointer-event(event) => {
                            mouse.height = touch.height / 1px;
                            mouse.width = touch.width / 1px;
                            mouse.position-x = touch.mouse-x / 1px;
                            mouse.position-y = touch.mouse-y / 1px;
    
                            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.up) {
                                mouse.is-release = true;
                            }
                            else if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down){
                                mouse.is-release = false;
                            }
                        }
                        moved => {
                            if (self.enabled && self.pressed) {
                                mouse.move-y = (touch.mouse-y - touch.pressed-y)/1px;
                                mouse.move-x = (touch.mouse-x - touch.pressed-x)/1px;
                            }
                        }
    
                        mouse-cursor: self.pressed ? MouseCursor.grabbing : MouseCursor.grab;
                    }
                }
                Rectangle {
                    width: 2px;
                    background: #ffffff;
                }
            }
        }
    }
}
