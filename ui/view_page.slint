
import { ListView, Button } from "std-widgets.slint";
import { CanMessage } from "messages.slint";
import { CanData } from "messages.slint";
export component viewPage inherits Rectangle {
    in-out property <bool> is_filter;
    in-out property <[CanData]> messages;
    in-out property <[CanData]> filter_messages;
    in-out property <int> page-num;
    in-out property <string> state;
    in-out property <int> bus_load: 0;
    in-out property <int> bitrate: 0;
    callback open_dbc_file();
    VerticalLayout {
        HorizontalLayout {
            button := Button {
                max-width: 50px;
                text: "Open";
                clicked => {
                    open_dbc_file();
                }
            }
            Rectangle {}
            Rectangle {
                Text {
                    text: "State: " + state;
                    color: white;
                }
            }
            Rectangle {}
            Rectangle {
                Text {
                    text: "Bitrate: " + bitrate;
                    color: white;
                }
            }
            Rectangle {}
            Rectangle {
                Text {
                    text: "Bus Load: " + bus_load + "%";
                    color: white;
                }
            }
            Rectangle {
                width: 50px;
            }
        }
        Rectangle {
            height: 1px;
            background: white;
        }
        if !root.is_filter:
        ListView {
            for message in messages: CanMessage {
                message_id: message.can-id;
                circle_time: message.circle-time;
                message_name: message.packet-name;
                counter: message.counter;
                signals: message.signal-value;
                raw_data: message.raw-can;
                back_ground: message.color;
            }
        }
        if root.is_filter:
        ListView {
            for message in filter_messages: CanMessage {
                message_id: message.can-id;
                circle_time: message.circle-time;
                message_name: message.packet-name;
                counter: message.counter;
                signals: message.signal-value;
                raw_data: message.raw-can;
                back_ground: message.color;
            }
        }
    }
}